<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git安装笔记</title>
    <url>/2020/04/18/Git%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Git安装笔记"><a href="#Git安装笔记" class="headerlink" title="Git安装笔记"></a>Git安装笔记</h1><p>当前系统环境</p>
<a id="more"></a>

<blockquote>
<p>主机系统：Windows 7-64</p>
<p>虚拟主机系统版本：CentOS Linux release 7.7.1908(Core) </p>
<p>内存：1.8GiB</p>
<p>处理器：intel Core i3-2375M <a href="mailto:CPU@1.50GHz">CPU@1.50GHz</a></p>
<p>GNOME版本：3.28.2</p>
<p>OS type：64-bit</p>
<p>虚拟化：VMware</p>
<p>磁盘：19.3 GB</p>
<p>当前用户：vv</p>
</blockquote>
<hr>
<h1 id="两种安装方式：使用yum安装和源码安装"><a href="#两种安装方式：使用yum安装和源码安装" class="headerlink" title="两种安装方式：使用yum安装和源码安装"></a>两种安装方式：使用yum安装和源码安装</h1><h2 id="第一种：使用yum安装Git"><a href="#第一种：使用yum安装Git" class="headerlink" title="第一种：使用yum安装Git"></a>第一种：使用yum安装Git</h2><p>一、首先检查是否安装过Git，输入命令 git –version 如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[vv@localhost ~]$ git --version</span><br><span class="line">bash: git: 未找到命令 ...</span><br><span class="line">[vv@localhost ~]$</span><br></pre></td></tr></table></figure>

<p>上面输出为未安装过Git</p>
<p>二、使用yum安装git，输入命令 yum -y install git 如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[vv@localhost ~]$ yum -y install git</span><br><span class="line">已加载插件：fastestmirror,langpacks</span><br><span class="line">您需要 root 权限执行此命令。</span><br><span class="line">[vv@localhost ~]$</span><br></pre></td></tr></table></figure>

<p>如上面输出，因当前用户非管理员，需要切换root管理员才可以安装。输入命令 su 之后输入管理员密码，然后回车，下面是切换root管理员成功的输出信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[vv@localhost ~]$ su</span><br><span class="line">密码：</span><br><span class="line">[root@localhost vv]#</span><br></pre></td></tr></table></figure>

<p>再次输入命令yum -y install git 即可完成安装</p>
<p>再次检查Git的版本，输入命令 git –version 如下输出表示已经安装成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost vv]# git --version</span><br><span class="line">git version 1.8.3.1</span><br><span class="line">[root@localhost vv]#</span><br></pre></td></tr></table></figure>

<p>到此使用yum安装完成</p>
<h2 id="第二种：使用源码安装Git"><a href="#第二种：使用源码安装Git" class="headerlink" title="第二种：使用源码安装Git"></a>第二种：使用源码安装Git</h2><p>一、刚才已经安装通过yum安装过Git，现在卸载git，注意应在root管理员状态下。</p>
<p>输入命令 yum remove git ,然后再次检查Git是否已经卸载，如下输出表示已经卸载</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost vv]#yum remove git</span><br><span class="line">[root@localhost vv]# git --version</span><br><span class="line">bash: /usr/bin/git: 没有那个文件或目录</span><br><span class="line">[root@localhost vv]#</span><br></pre></td></tr></table></figure>

<p>二、配置源码编译Git需要的依赖环境,依次输入以下命令，等待一条命令完成再次输入下一条命令。所有命令完成后进行第三步。命令如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install gcc gcc-c++ curl-devel expat-devel gettext-devel openssl-devel zlib-devel autoconf automake libtool perl-ExtUtils-MakeMaker -y</span><br></pre></td></tr></table></figure>

<p>三、下载Git源码，输入命令 wget <a href="https://github.com/git/git/archive/v2.26.1.tar.gz" target="_blank" rel="noopener">https://github.com/git/git/archive/v2.26.1.tar.gz</a> ,并查看下载的源码包输入命令 ls 如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost vv]# wget https://github.com/git/git/archive/v2.26.1.tar.gz</span><br><span class="line">[root@localhost vv]# ls</span><br><span class="line">v2.26.1.tar.gz</span><br></pre></td></tr></table></figure>

<p>四、解压下载好的源码，输入命令 tar -zxf v2.26.1.tar.gz 如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost vv]# tar -zxf v2.26.1.tar.gz</span><br><span class="line">[root@localhost vv]# ls</span><br><span class="line">git-2.26.1	v2.26.1.tar.gz</span><br></pre></td></tr></table></figure>

<p>五、进入源码目录，生成配置(configure)文件并配置指定Git编译安装目录，输入命令 cd git-2.26.1 ,进入该目录后输入命令 make configure 生成configure文件，然后配置指定Git编译安装目录，输入命令 ./comfigure –prefix=/usr ,命令完成后进行编译，输入命令 make&amp;&amp;make install 如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost vv]# cd git-2.26.1</span><br><span class="line">[root@localhost git-2.26.1]# make configure</span><br><span class="line">	GEN configure</span><br><span class="line">[root@localhost git-2.26.1]# ./configure --prefix=/usr</span><br><span class="line">[root@localhost git-2.26.1]# make&amp;&amp;make install</span><br></pre></td></tr></table></figure>

<p>六、编译过程比较慢，上面命令完成后，如没有报告任何错误则表示Git编译安装成功，让我们来查看编译安装后的Git版本是多少吧，输入命令 git –version 如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost git-2.26.1]# git -version</span><br><span class="line">git version 2.26.1</span><br><span class="line">[root@localhost git-2.26.1]#</span><br></pre></td></tr></table></figure>

<p>如上输出表示Git编译安装成功，到此两种方式安装Git结束。</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git最小配置</title>
    <url>/2020/04/18/Git%E6%9C%80%E5%B0%8F%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="安装完Git首先要配置user信息"><a href="#安装完Git首先要配置user信息" class="headerlink" title="安装完Git首先要配置user信息"></a>安装完Git首先要配置user信息</h1><a id="more"></a>

<h1 id="配置user信息"><a href="#配置user信息" class="headerlink" title="配置user信息"></a>配置user信息</h1><h2 id="配置user-name和user-email"><a href="#配置user-name和user-email" class="headerlink" title="配置user.name和user.email"></a>配置user.name和user.email</h2><p>命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.name <span class="string">'your_name'</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.email <span class="string">'your_email'</span></span></span><br></pre></td></tr></table></figure>

<!-- more -->

<h3 id="config的三个作用域"><a href="#config的三个作用域" class="headerlink" title="config的三个作用域"></a>config的三个作用域</h3><blockquote>
<p>缺省等同于local</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git config --<span class="built_in">local</span>	<span class="comment">#local只对某个仓库有效</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --global	<span class="comment">#global对当前用户所有仓库有效。“常用”</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --system	<span class="comment">#system对系统所有登录用户有效。“基本不用”</span></span></span><br></pre></td></tr></table></figure>

<p>显示config的配置信息，加 –list</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git config --list --<span class="built_in">local</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --list --global</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --list --system</span></span><br></pre></td></tr></table></figure>

</blockquote>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git笔记</title>
    <url>/2020/04/18/Git%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Git版本管理的演变"><a href="#Git版本管理的演变" class="headerlink" title="Git版本管理的演变"></a>Git版本管理的演变</h1><h3 id="集中式VCS"><a href="#集中式VCS" class="headerlink" title="集中式VCS:"></a>集中式VCS:</h3><a id="more"></a>

<p>有集中的版本管理服务器</p>
<p>具备文件版本管理和分支管理能力</p>
<p>集成效率有明显提高</p>
<p>客户端必须时刻和服务器相连</p>
<h3 id="分布式VCS"><a href="#分布式VCS" class="headerlink" title="分布式VCS"></a>分布式VCS</h3><p>服务端和客户端都有完整的版本库</p>
<p>脱离服务端，客户端照样可以管理版本</p>
<p>查看历史和版本比较等多数操作，都不需要访问服务器，比集中式VCS更能提高版本的管理效率</p>
<h1 id="Git的特点"><a href="#Git的特点" class="headerlink" title="Git的特点"></a>Git的特点</h1><p>最优的存储能力</p>
<p>非凡的性能</p>
<p>开源的</p>
<p>很容易的备份</p>
<p>支持离线操作</p>
<p>很容易定制工作流程</p>
<h1 id="Git相关"><a href="#Git相关" class="headerlink" title="Git相关"></a>Git相关</h1><p>Git    官网：<a href="https://git-scm.com" target="_blank" rel="noopener">https://git-scm.com</a></p>
<p>GitHub 官网：<a href="https://github.com" target="_blank" rel="noopener">https://github.com</a></p>
<p>GitLab    官网：<a href="https://about.gitlab.com" target="_blank" rel="noopener">https://about.gitlab.com</a>    有社区版本，很多公司采用</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础</title>
    <url>/2021/05/27/Java%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>123214测试</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>JavaSE基础</tag>
      </tags>
  </entry>
</search>
